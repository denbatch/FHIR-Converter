targetScope = 'subscription'

@minLength(3)
@maxLength(9)
@description('Used as the prefix to name provisioned resources where a custom name is not provided. Should be alphanumeric, at least 3 characters and no more than 9 characters.')
param serviceName string

@description('Location where the resources are deployed.')
@allowed([
  'australiaeast'
  'canadacentral'
  'centralindia'
  'centralus'
  'eastus'
  'eastus2'
  'francecentral'
  'germanywestcentral'
  'japaneast'
  'koreacentral'
  'northcentralus'
  'northeurope'
  'southcentralus'
  'southeastasia'
  'swedencentral'
  'switzerlandnorth'
  'uksouth'
  'westeurope'
  'westus2'
  'westus3'
])
param location string

@description('Name of the resource group to deploy the resources to. If the resource group does not already exist, a new resource group will be provisioned with the given name or with an autogenerated name based on serviceName if one is not provided.')
param resourceGroupName string = '${serviceName}-rg'

@description('Set to true to deploy a storage account for storing custom templates.')
param deployTemplateStore bool

@description('Name of storage account containing custom templates. If a name is not provided and deployTemplateStore is true, an autogenerated name based on serviceName will be used.')
param templateStorageAccountName string = deployTemplateStore ? '${serviceName}templatestorage' : '' 

@description('Name of storage account container containing custom templates. If a name is not provided and deployTemplateStore is true, an autogenerated name based on serviceName will be used.')
param templateStorageAccountContainerName string = deployTemplateStore ? '${serviceName}templatecontainer' : ''

@description('Name of the container app environment. If a name is not provided, an autogenerated name based on serviceName will be used.')
param envName string = '${serviceName}-app-env'

@description('Name of the container app to run the fhirconverter service. If a name is not provided, an autogenerated name based on serviceName will be used.')
param appName string = '${serviceName}-app'

@description('Minimum number of replicas for the container app')
param minReplicas int = 0

@description('Maximum number of replicas for the container app')
param maxReplicas int = 30

@description('CPU limit for the container app')
param cpuLimit string = '1.0'

@description('Memory limit for the container app')
param memoryLimit string = '2Gi'

@description('Set to true to authentication requirement on the api endpoint.')
param securityEnabled bool = false

@description('Audiences for the api authentication.')
param securityAuthenticationAudiences array = []

@description('Authority for the api authentication.')
param securityAuthenticationAuthority string = ''

@description('The tag of the image to pull from MCR. To see available image versions, visit ')
param mcrImageTag string

resource resourceGroup 'Microsoft.Resources/resourceGroups@2020-06-01' = {
  name: resourceGroupName
  location: location
}

module templateStoreDeploy 'Deploy-TemplateStore.bicep' = if (deployTemplateStore) {
  name: 'templateStoreDeploy'
  scope: resourceGroup
  params: {
    location: location
    templateStorageAccountName: templateStorageAccountName
    templateStorageAccountContainerName: templateStorageAccountContainerName
  }
}

module convertInfrastructureDeploy 'Infrastructure-Setup.bicep' = {
  name: 'convertInfrastructureDeploy'
  scope: resourceGroup
  params: {
    location: location
    envName: envName
  }
}

module fhirConverterDeploy 'Deploy-FhirConverterService.bicep' = {
  name: 'fhirConverterDeploy'
  scope: resourceGroup
  params: {
    location: location
    appName: appName
    envName: convertInfrastructureDeploy.outputs.containerAppEnvironmentName
    minReplicas: minReplicas
    maxReplicas: maxReplicas
    cpuLimit: cpuLimit
    memoryLimit: memoryLimit
    securityEnabled: securityEnabled
    securityAuthenticationAudiences: securityAuthenticationAudiences
    securityAuthenticationAuthority: securityAuthenticationAuthority
    templateStorageAccountName: deployTemplateStore ? templateStoreDeploy.outputs.templateStorageAccountName : templateStorageAccountName
    templateStorageAccountContainerName: deployTemplateStore ? templateStoreDeploy.outputs.templateStorageAccountContainerName : templateStorageAccountContainerName
    imageTag: mcrImageTag
  }
  dependsOn: [
    templateStoreDeploy
    convertInfrastructureDeploy
  ]
}

output fhirConverterApiEndpoint string = fhirConverterDeploy.outputs.containerAppFQDN
output resourceGroupName string = resourceGroup.name